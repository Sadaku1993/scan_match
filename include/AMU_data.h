/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/ceres_msgs/msg/AMU_data.msg */
#ifndef CERES_MSGS_MESSAGE_AMU_DATA_H
#define CERES_MSGS_MESSAGE_AMU_DATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace ceres_msgs
{
template <class ContainerAllocator>
struct AMU_data_ {
  typedef AMU_data_<ContainerAllocator> Type;

  AMU_data_()
  : header()
  , xaccel(0.0)
  , yaccel(0.0)
  , zaccel(0.0)
  , droll(0.0)
  , dpitch(0.0)
  , dyaw(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  AMU_data_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , xaccel(0.0)
  , yaccel(0.0)
  , zaccel(0.0)
  , droll(0.0)
  , dpitch(0.0)
  , dyaw(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _xaccel_type;
  float xaccel;

  typedef float _yaccel_type;
  float yaccel;

  typedef float _zaccel_type;
  float zaccel;

  typedef float _droll_type;
  float droll;

  typedef float _dpitch_type;
  float dpitch;

  typedef float _dyaw_type;
  float dyaw;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;


  typedef boost::shared_ptr< ::ceres_msgs::AMU_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ceres_msgs::AMU_data_<ContainerAllocator>  const> ConstPtr;
}; // struct AMU_data
typedef  ::ceres_msgs::AMU_data_<std::allocator<void> > AMU_data;

typedef boost::shared_ptr< ::ceres_msgs::AMU_data> AMU_dataPtr;
typedef boost::shared_ptr< ::ceres_msgs::AMU_data const> AMU_dataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ceres_msgs::AMU_data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ceres_msgs::AMU_data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ceres_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ceres_msgs::AMU_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ceres_msgs::AMU_data_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ceres_msgs::AMU_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aa72a15f59b7d36445af361911e71265";
  }

  static const char* value(const  ::ceres_msgs::AMU_data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaa72a15f59b7d364ULL;
  static const uint64_t static_value2 = 0x45af361911e71265ULL;
};

template<class ContainerAllocator>
struct DataType< ::ceres_msgs::AMU_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ceres_msgs/AMU_data";
  }

  static const char* value(const  ::ceres_msgs::AMU_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ceres_msgs::AMU_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
float32 xaccel # G \n\
float32 yaccel\n\
float32 zaccel\n\
\n\
float32 droll  # deg/sec\n\
float32 dpitch\n\
float32 dyaw\n\
\n\
float32 roll   # deg\n\
float32 pitch\n\
float32 yaw\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ceres_msgs::AMU_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ceres_msgs::AMU_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ceres_msgs::AMU_data_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ceres_msgs::AMU_data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.xaccel);
    stream.next(m.yaccel);
    stream.next(m.zaccel);
    stream.next(m.droll);
    stream.next(m.dpitch);
    stream.next(m.dyaw);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AMU_data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ceres_msgs::AMU_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ceres_msgs::AMU_data_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "xaccel: ";
    Printer<float>::stream(s, indent + "  ", v.xaccel);
    s << indent << "yaccel: ";
    Printer<float>::stream(s, indent + "  ", v.yaccel);
    s << indent << "zaccel: ";
    Printer<float>::stream(s, indent + "  ", v.zaccel);
    s << indent << "droll: ";
    Printer<float>::stream(s, indent + "  ", v.droll);
    s << indent << "dpitch: ";
    Printer<float>::stream(s, indent + "  ", v.dpitch);
    s << indent << "dyaw: ";
    Printer<float>::stream(s, indent + "  ", v.dyaw);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CERES_MSGS_MESSAGE_AMU_DATA_H

